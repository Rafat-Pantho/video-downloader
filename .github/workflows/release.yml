name: Build and Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    env:
      CSC_IDENTITY_AUTO_DISCOVERY: false
      ELECTRON_BUILDER_CACHE: "${{ github.workspace }}/.cache/electron-builder"
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Linux packaging deps
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            xz-utils \
            fakeroot \
            dpkg \
            desktop-file-utils \
            icnsutils \
            graphicsmagick

      - name: Build (Windows)
        if: matrix.os == 'windows-latest'
        run: npx electron-builder --win --publish=never

      - name: Build (macOS)
        if: matrix.os == 'macos-latest'
        run: npx electron-builder --mac --publish=never

      - name: Build (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: npx electron-builder --linux --publish=never

      - name: List build outputs (Unix)
        if: matrix.os != 'windows-latest'
        shell: bash
        run: |
          echo "OS ${{ matrix.os }} contents of dist:"
          ls -la dist || true

      - name: List build outputs (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          Write-Host "OS windows-latest contents of dist:"
          if (Test-Path dist) { Get-ChildItem -Recurse dist | Format-Table FullName,Length -Auto }

      - name: Prepare release notes from CHANGELOG
        shell: bash
        run: |
          TAG="${GITHUB_REF_NAME}"
          FILE=CHANGELOG.md
          OUT=release-notes.md
          if [ -f "$FILE" ]; then
            # Extract section starting at '## [TAG]' or '## TAG' up to next '## '
            awk -v tag="$TAG" '/^## /{p=0} $0 ~ "^## \\[[vV]" tag "\\]" || $0 ~ "^## " tag {p=1} p{print}' "$FILE" | sed -n '1,/^## /p' | sed '$d' > "$OUT" || true
            # Fallback: try without trimming
            if [ ! -s "$OUT" ]; then
              awk -v tag="$TAG" '$0 ~ "^## \\[[vV]" tag "\\]" || $0 ~ "^## " tag, /^## /{print}' "$FILE" | sed '$d' > "$OUT" || true
            fi
            # If still empty, use entire file
            if [ ! -s "$OUT" ]; then cp "$FILE" "$OUT"; fi
          else
            echo "Release $TAG" > "$OUT"
          fi
          echo "RELEASE_NOTES=$OUT" >> $GITHUB_ENV

      - name: Upload build outputs as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ matrix.os }}
          if-no-files-found: ignore
          path: |
            dist/*.exe
            dist/*.blockmap
            dist/*.dmg
            dist/*.zip
            dist/*.AppImage
            dist/*.deb

  publish:
    name: Create GitHub Release and upload assets
    runs-on: ubuntu-latest
    needs: build
    env:
      CSC_IDENTITY_AUTO_DISCOVERY: false
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Purge step removed - keep all releases for version history
      # Users can manually delete old releases if needed

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          merge-multiple: true

      - name: Create/Update GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: Video Downloader ${{ github.ref_name }}
          files: artifacts/**/*
          fail_on_unmatched_files: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
